name: Server Scripts Tests

on:
  pull_request:
    branches: [ main ]
  # Allow manual trigger of workflow
  workflow_dispatch:

jobs:
  shellcheck:
    name: ShellCheck Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: Run ShellCheck on all shell scripts
        run: |
          find . -type f -name "*.sh" -exec shellcheck {} \;

  bash-syntax-check:
    name: Bash Syntax Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify bash syntax of all scripts
        run: |
          for script in $(find . -type f -name "*.sh"); do
            echo "Checking syntax for $script"
            bash -n "$script"
          done

  test-docker-user-creation:
    name: Test User Creation Script
    runs-on: ubuntu-latest
    needs: [shellcheck, bash-syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set execute permissions
        run: chmod +x new_droplet_user.sh

      - name: Create Docker container for testing
        run: |
          docker run -d --name test-container -v ${{ github.workspace }}:/scripts ubuntu:24.04 sleep infinity

      - name: Update container and install sudo
        run: |
          docker exec test-container apt-get update
          docker exec test-container apt-get install -y sudo

      - name: Test user creation script
        run: |
          # Add || true to prevent failed exit code from stopping workflow
          docker exec -i test-container bash -c "cd /scripts && echo -e 'testuser\ntestpassword\n' | sudo ./new_droplet_user.sh || true"

      - name: Verify user was created
        run: |
          docker exec test-container id testuser || echo "User creation test failed"
          docker exec test-container groups testuser | grep sudo || echo "User sudo group test failed"

      - name: Clean up Docker container
        run: docker rm -f test-container
        if: always()

  test-package-installation:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: [shellcheck, bash-syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Docker container
        run: |
          docker run -d --name package-test-container ubuntu:24.04 sleep infinity

      - name: Create package test script
        run: |
          cat > package_test.sh << 'EOF'
          #!/bin/bash
          set -e

          # Update package lists
          echo "Updating package repositories..."
          apt-get update

          # Function to check package installation
          check_package() {
            local package=$1
            local binary_name=${2:-$1}
            
            echo "Testing installation of $package..."
            apt-get install -y $package
            
            if command -v $binary_name >/dev/null 2>&1; then
              echo "✅ $package successfully installed"
              return 0
            else
              echo "⚠️ $binary_name command not found after installing $package"
              return 1
            fi
          }

          # Test core packages
          echo "==== Testing core packages ===="
          check_package "ufw" || echo "UFW test failed, but continuing..."
          check_package "nginx" || echo "Nginx test failed, but continuing..."
          check_package "expect" || echo "Expect test failed, but continuing..."
          check_package "git" || echo "Git test failed, but continuing..."
          
          # Test MariaDB packages (just check installation, not functionality)
          echo "==== Testing MariaDB packages ===="
          apt-get install -y mariadb-client
          if dpkg -l | grep -q "mariadb-client"; then
            echo "✅ MariaDB client successfully installed"
          else
            echo "⚠️ MariaDB client not found in package list"
          fi
          
          # Install minimal MariaDB server packages (don't try to start the service)
          apt-get install -y mariadb-server --no-install-recommends
          if dpkg -l | grep -q "mariadb-server"; then
            echo "✅ MariaDB server package successfully installed"
          else
            echo "⚠️ MariaDB server not found in package list"
          fi

          # Test PHP installation
          echo "==== Testing PHP installation ===="
          apt-get install -y php8.3-cli
          if php --version | grep -q "PHP 8.3"; then
            echo "✅ PHP 8.3 successfully installed"
          else
            echo "⚠️ PHP 8.3 not installed correctly"
          fi

          echo "==== Package installation tests completed ===="
          EOF

          chmod +x package_test.sh
          docker cp package_test.sh package-test-container:/

      - name: Run package tests
        run: |
          docker exec package-test-container bash -c "DEBIAN_FRONTEND=noninteractive /package_test.sh"

      - name: Clean up Docker container
        run: docker rm -f package-test-container
        if: always()
