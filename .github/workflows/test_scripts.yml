name: Server Scripts Tests

on:
  pull_request:
    branches: [ main ]
  # Allow manual trigger of workflow
  workflow_dispatch:

jobs:
  shellcheck:
    name: ShellCheck Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: Run ShellCheck on all shell scripts
        run: |
          find . -type f -name "*.sh" -exec shellcheck {} \;

  bash-syntax-check:
    name: Bash Syntax Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify bash syntax of all scripts
        run: |
          for script in $(find . -type f -name "*.sh"); do
            echo "Checking syntax for $script"
            bash -n "$script"
          done

  test-docker-user-creation:
    name: Test User Creation Script
    runs-on: ubuntu-latest
    needs: [shellcheck, bash-syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set execute permissions
        run: chmod +x new_droplet_user.sh

      - name: Create Docker container for testing
        run: |
          docker run -d --name test-container -v ${{ github.workspace }}:/scripts ubuntu:24.04 sleep infinity

      - name: Update container and install sudo
        run: |
          docker exec test-container apt-get update
          docker exec test-container apt-get install -y sudo

      - name: Test user creation script
        run: |
          docker exec -i test-container bash -c "cd /scripts && echo -e 'testuser\ntestpassword\n' | sudo ./new_droplet_user.sh"

      - name: Verify user was created
        run: |
          docker exec test-container id testuser
          docker exec test-container groups testuser | grep sudo

      - name: Clean up Docker container
        run: docker rm -f test-container
        if: always()

  test-docker-install:
    name: Test Installation Script (Package Installation Only)
    runs-on: ubuntu-latest
    needs: [shellcheck, bash-syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set execute permissions
        run: chmod +x install.sh

      - name: Create Docker container for installation test
        run: |
          # Use --privileged to give more permissions for testing
          docker run -d --privileged --name install-container -v ${{ github.workspace }}:/scripts ubuntu:24.04 sleep infinity

      - name: Update container and install sudo
        run: |
          docker exec install-container apt-get update
          docker exec install-container apt-get install -y sudo

      - name: Create Docker-specific test script
        run: |
          cat > test_docker_install.sh << 'EOF'
          #!/bin/bash
          # Modified version of install.sh for Docker testing
          
          # Set error handling
          set -e
          
          # Create a copy of the original install script
          cp /scripts/install.sh /tmp/modified_install.sh
          
          # Modify the script to exclude problematic parts in Docker
          
          # 1. Skip firewall configuration
          sed -i '/^# Install and configure Firewall/,/^fi$/ s/^/# DOCKER_TEST: /' /tmp/modified_install.sh
          
          # 2. Add a replacement firewall section that just installs the package but doesn't configure
          sed -i '/^# DOCKER_TEST: # Install and configure Firewall/ i\
          # Install UFW package only (no configuration in Docker)\
          echo "Installing Uncomplicated Firewall (UFW) package only..."\
          sudo apt install -y ufw\
          echo "Note: Firewall not configured in Docker test environment"\
          ' /tmp/modified_install.sh
          
          # 3. Skip MariaDB secure installation
          sed -i '/^# Automated secure MariaDB installation/,/sudo rm \/tmp\/secure_mysql.expect/ s/^/# DOCKER_TEST: /' /tmp/modified_install.sh
          
          # 4. Skip service restarts at the end
          sed -i '/^# Restart services/,/sudo systemctl restart php/ s/^/# DOCKER_TEST: /' /tmp/modified_install.sh
          
          # 5. Skip any interactive prompts
          sed -i 's/read -p "Enter the name of your production branch/PRODUCTION_BRANCH="DEMO" # Automated test/g' /tmp/modified_install.sh
          sed -i 's/read -p "Are you sure you want to enable the firewall now/confirm_firewall="n" # Skip firewall for tests/g' /tmp/modified_install.sh
          
          # 6. Add an early exit after package installation
          sed -i '/# Install Composer/i\
          # Early exit for Docker testing\
          echo "=================================================="\
          echo "DOCKER TEST: Package installation test completed"\
          echo "DOCKER TEST: Exiting early - service configuration skipped"\
          echo "=================================================="\
          exit 0' /tmp/modified_install.sh
          
          # Run the modified script
          cd /tmp
          chmod +x modified_install.sh
          DEBIAN_FRONTEND=noninteractive ./modified_install.sh
          EOF
          
          chmod +x test_docker_install.sh
          docker cp test_docker_install.sh install-container:/scripts/

      - name: Run the Docker-specific test script
        run: |
          docker exec install-container bash -c "cd /scripts && sudo ./test_docker_install.sh"

      - name: Verify key packages were installed
        run: |
          echo "Verifying key package installations..."
          
          # Check for UFW
          echo -n "UFW: "
          docker exec install-container which ufw || echo "Not found"
          
          # Check for Nginx
          echo -n "Nginx: "
          docker exec install-container which nginx || echo "Not found"
          
          # Check for PHP
          echo -n "PHP: "
          docker exec install-container bash -c "php --version 2>/dev/null | head -n 1" || echo "Not found"
          
          # Check for Git
          echo -n "Git: "
          docker exec install-container which git || echo "Not found"
          
          # Check for MariaDB package (not the service)
          echo -n "MariaDB Client: "
          docker exec install-container bash -c "apt list --installed 2>/dev/null | grep -i mariadb" || echo "Not found"

      - name: Clean up Docker container
        run: docker rm -f install-container
        if: always()
